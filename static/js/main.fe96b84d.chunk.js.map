{"version":3,"sources":["util.js","App.js","index.js"],"names":["generateMinesweeper","size","mines","board","Array","fill","map","_","forEach","mine","i","j","dirs","countMinesForCell","dir","neighborI","neighborJ","traverse","n","length","cellVal","generateMinesByNumber","num","Error","seen","Set","prevSize","Math","floor","random","position","String","add","push","isGameFinished","total","counts","val","indexOf","settings","difficulty","boardSize","numOfMines","flags","App","useState","selected","setSelected","setFlags","cheatMode","setCheatMode","setBoard","status","setStatus","useEffect","handleRestartGame","shouldDisplayCell","renderCell","replace","className","htmlFor","name","onChange","e","JSON","parse","target","value","setting","index","stringify","type","checked","onClick","rowData","disabled","copyBoard","cloneDeep","handleCellClick","onContextMenu","preventDefault","handleRightClick","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.fe96b84d.chunk.js","sourcesContent":["export const MINE = \"m\";\n/**\n *\n * @param {number} size - size of board\n * @param {number[]} mines - mine location (row, column)\n * each cell has up to 8 adjacent cells\n * cell value (type: string):\n * 0 - no mine in the adjacent cells\n * 1 - 1 mine in the adjacent cells\n * 2 - 2 mines in the adjacent cells\n * 3 - 3 mines in the adjacent cells\n * m - mine\n */\nexport const generateMinesweeper = (size, mines) => {\n  const board = Array(size)\n    .fill()\n    .map((_) => Array(size).fill(0));\n  mines.forEach((mine) => {\n    const [i, j] = mine;\n    board[i][j] = MINE;\n  });\n\n  const dirs = [\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n    [0, -1],\n    [0, 1],\n    [1, -1],\n    [1, 0],\n    [1, 1]\n  ];\n\n  const countMinesForCell = (i, j) => {\n    let mines = 0;\n    dirs.forEach((dir) => {\n      const neighborI = i + dir[0];\n      const neighborJ = j + dir[1];\n      if (board[neighborI] && board[neighborI][neighborJ] === MINE) {\n        mines++;\n      }\n    });\n    return mines;\n  };\n\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < size; j++) {\n      if (board[i][j] === 0) {\n        board[i][j] = countMinesForCell(i, j);\n      }\n    }\n  }\n\n  return board;\n};\n\nexport const traverse = (board, i, j) => {\n  const n = board.length;\n  if (i < 0 || i >= n || j < 0 || j >= n) {\n    return;\n  }\n\n  const cellVal = board[i][j];\n  if (cellVal === 0) {\n    board[i][j] = \"#\";\n    traverse(board, i - 1, j); // up\n    traverse(board, i + 1, j); // down\n    traverse(board, i, j - 1); // left\n    traverse(board, i, j + 1); // right\n  }\n\n  if (cellVal > 0) {\n    board[i][j] = `#${cellVal}`; // add \"#\" to reveal the cell for UI\n    return;\n  }\n};\n\n/**\n *\n * @param {number} size - board size\n * @param {number} num - number of mines to be randomly placed in mines\n */\nexport const generateMinesByNumber = (size, num) => {\n  if (num >= size * size) {\n    throw Error(\"way too many mines for the board\");\n  }\n\n  const mines = [];\n  const seen = new Set();\n  for (let i = 0; i < num; i++) {\n    const prevSize = seen.size;\n    let i, j;\n    while (prevSize === seen.size) {\n      i = Math.floor(Math.random() * size);\n      j = Math.floor(Math.random() * size);\n      const position = String(i) + \"-\" + String(j);\n      seen.add(position);\n    }\n    mines.push([i, j]);\n  }\n  return mines;\n};\n\nexport const isGameFinished = (board) => {\n  const n = board.length;\n  let total = n * n;\n  let counts = 0;\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board.length; j++) {\n      const val = String(board[i][j]);\n      if (val.indexOf(\"#\") > -1 || val.indexOf(\"f\") > -1) {\n        counts++;\n      }\n    }\n  }\n  return counts === total;\n};\n","import { useState, useEffect } from \"react\";\nimport { cloneDeep } from \"lodash\";\nimport \"./styles.scss\";\nimport {\n  generateMinesweeper,\n  traverse,\n  generateMinesByNumber,\n  isGameFinished\n} from \"./util\";\n\nconst settings = [\n  {\n    difficulty: \"easy\",\n    boardSize: 5,\n    numOfMines: 4,\n    flags: 7\n  },\n  {\n    difficulty: \"medium\",\n    boardSize: 8,\n    numOfMines: 10,\n    flags: 12\n  },\n  {\n    difficulty: \"hard\",\n    boardSize: 12,\n    numOfMines: 15,\n    flags: 16\n  },\n  {\n    difficulty: \"expert\",\n    boardSize: 15,\n    numOfMines: 30,\n    flags: 31\n  }\n];\n\nexport default function App() {\n  const [selected, setSelected] = useState(settings[0]);\n  const [flags, setFlags] = useState(selected.flags);\n  const [cheatMode, setCheatMode] = useState(false);\n  const [board, setBoard] = useState(\n    generateMinesweeper(\n      selected.boardSize,\n      generateMinesByNumber(selected.boardSize, selected.numOfMines)\n    )\n  );\n\n  const [status, setStatus] = useState(\"playing\");\n\n  useEffect(() => {\n    handleRestartGame();\n  }, [selected.difficulty]);\n\n  const shouldDisplayCell = (i, j) =>\n    status !== \"playing\" ||\n    String(board[i][j]).indexOf(\"#\") > -1 ||\n    String(board[i][j]).indexOf(\"f\") > -1;\n\n  const renderCell = (i, j) => {\n    const val = String(board[i][j]).replace(\"#\", \"\").replace(\"0\", \"\");\n    if (cheatMode && val === \"m\") {\n      return \"ðŸ’£\";\n    }\n    if (!shouldDisplayCell(i, j)) {\n      return \"\";\n    }\n\n    if (val === \"m\") {\n      return \"ðŸ’£\";\n    }\n\n    if (val.indexOf(\"f\") > -1) {\n      return \"ðŸš©\";\n    }\n\n    return val;\n  };\n\n  const handleCellClick = (i, j) => {\n    if (status !== \"playing\") {\n      return;\n    }\n    const val = String(board[i][j]);\n    if (val.indexOf(\"f\") > -1) {\n      return;\n    }\n    const copyBoard = cloneDeep(board);\n    if (val === \"m\") {\n      copyBoard[i][j] = \"#m\";\n      setStatus(\"lost\");\n    } else {\n      traverse(copyBoard, i, j);\n    }\n    setBoard(copyBoard);\n    if (isGameFinished(copyBoard)) {\n      setStatus(\"won\");\n    }\n  };\n\n  const handleRightClick = (e, i, j) => {\n    e.preventDefault();\n    if (status !== \"playing\") {\n      return;\n    }\n    const val = String(board[i][j]);\n    if (val.indexOf(\"#\") > -1) {\n      return;\n    }\n\n    const copyBoard = cloneDeep(board);\n\n    // remove a flag\n    if (val.indexOf(\"f\") > -1) {\n      copyBoard[i][j] = val.replace(\"f\", \"\");\n      setBoard(copyBoard);\n      setFlags(flags + 1);\n      return;\n    }\n\n    // add a flag\n    if (flags > 0) {\n      copyBoard[i][j] = val + \"f\";\n      setBoard(copyBoard);\n      setFlags(flags - 1);\n      if (isGameFinished(copyBoard)) {\n        setStatus(\"won\");\n      }\n    }\n  };\n\n  const handleRestartGame = () => {\n    setStatus(\"playing\");\n    setFlags(selected.flags);\n    setBoard(\n      generateMinesweeper(\n        selected.boardSize,\n        generateMinesByNumber(selected.boardSize, selected.numOfMines)\n      )\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <label htmlFor=\"difficulty\">Choose a difficulty:</label>\n      <select\n        className=\"selectDifficulty\"\n        name=\"difficulty\"\n        onChange={(e) => {\n          setSelected(JSON.parse(e.target.value));\n        }}\n      >\n        {settings.map((setting, index) => (\n          <option\n            key={setting.difficulty}\n            value={JSON.stringify(settings[index])}\n          >\n            {setting.difficulty}\n          </option>\n        ))}\n      </select>\n      <br />\n      <label htmlFor=\"cheatMode\"> Cheat mode</label>\n      <input\n        type=\"checkbox\"\n        name=\"cheatMode\"\n        onChange={(e) => setCheatMode(e.target.checked)}\n      />\n      <p>Flags: {flags}</p>\n      <p>Mines: {selected.numOfMines}</p>\n      <button className=\"restartBtn\" onClick={handleRestartGame}>\n        Restart game\n      </button>\n\n      <div className=\"board\">\n        {board.map((rowData, i) => (\n          <div key={`row-${i}`} className=\"row\">\n            {rowData.map((_, j) => (\n              <div\n                key={`cell-${i}-${j}`}\n                className={`cell ${\n                  shouldDisplayCell(i, j) ? \"revealed\" : \"unvisited\"\n                } ${\n                  board[i][j] === \"#m\" && status !== \"playing\"\n                    ? \"activeMine\"\n                    : \"regularCell\"\n                }`}\n                disabled={status !== \"playing\"}\n                onClick={() => handleCellClick(i, j)}\n                onContextMenu={(e) => handleRightClick(e, i, j)}\n              >\n                {renderCell(i, j)}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n      {status !== \"playing\" && (\n        <div className={`info ${status}`} onClick={handleRestartGame}>\n          <p>{`you ${status} (click here to play again)`}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}